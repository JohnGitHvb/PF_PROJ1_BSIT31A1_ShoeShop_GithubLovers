using Microsoft.EntityFrameworkCore;
using ShoeShop.Data;
using ShoeShop.Entities;

namespace ShoeShop.Repository.ConsoleApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var options = new DbContextOptionsBuilder<ShoeShopDbContext>()
                .UseSqlite("Data Source=shoe_shop.db")
                .Options;

            using var context = new ShoeShopDbContext(options);
            context.Database.EnsureCreated();
            SeedData.Seed(context);

            // CRUD: Add, Read, Update, Delete Shoes
            var shoe = new Shoe
            {
                Name = "Nike Air Max",
                Brand = "Nike",
                Cost = 4000,
                Price = 6500,
                Description = "Popular running shoe.",
                IsActive = true,
                CreatedDate = DateTime.Now
            };
            context.Shoes.Add(shoe);
            context.SaveChanges();

            // Query: Low stock color variations
            var lowStock = context.ShoeColorVariations.Where(cv => cv.StockQuantity <= cv.ReorderLevel).ToList();
            Console.WriteLine($"Low stock count: {lowStock.Count}");

            // Query: Pending purchase orders
            var pendingOrders = context.PurchaseOrders.Where(po => po.Status == PurchaseOrderStatus.Pending).ToList();
            Console.WriteLine($"Pending orders: {pendingOrders.Count}");

            // Relationship: List all shoes with color variations
            var shoesWithColors = context.Shoes.Include(s => s.ColorVariations).ToList();
            foreach (var s in shoesWithColors)
            {
                Console.WriteLine($"Shoe: {s.Name}, Colors: {s.ColorVariations.Count}");
            }

            // Test update
            var firstShoe = context.Shoes.FirstOrDefault();
            if (firstShoe != null)
            {
                firstShoe.Description = "Updated description.";
                context.SaveChanges();
            }

            // Test delete
            var lastShoe = context.Shoes.OrderByDescending(s => s.Id).FirstOrDefault();
            if (lastShoe != null)
            {
                context.Shoes.Remove(lastShoe);
                context.SaveChanges();
            }
        }
    }
}
