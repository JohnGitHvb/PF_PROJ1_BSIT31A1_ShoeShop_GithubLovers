@model ShoeShop.Services.DTOs.CreatePurchaseOrderDto
@{
    ViewData["Title"] = "Create Purchase Order";
    var suppliers = ViewBag.Suppliers as List<ShoeShop.Services.DTOs.SupplierDto>;
    var colorVariations = ViewBag.ColorVariations as List<ShoeShop.Services.DTOs.ShoeColorVariationDto>;
}

<div class="page-header">
    <h2><i class="fas fa-plus"></i> Create Purchase Order</h2>
    <p>Create a new purchase order to restock inventory</p>
</div>

<div class="row">
    <div class="col-lg-10 mx-auto">
        <div class="card">
            <div class="card-body p-4">
                <form asp-action="Create" method="post" id="purchaseOrderForm">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                    <!-- Order Information -->
                    <h5 class="mb-3"><i class="fas fa-info-circle"></i> Order Information</h5>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="SupplierId" class="form-label">Supplier *</label>
                            <select asp-for="SupplierId" class="form-select">
                                <option value="">-- Select Supplier --</option>
                                @if (suppliers != null)
                                {
                                    @foreach (var supplier in suppliers)
                                    {
                                        <option value="@supplier.Id">@supplier.Name</option>
                                    }
                                }
                            </select>
                            <span asp-validation-for="SupplierId" class="text-danger"></span>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="ExpectedDate" class="form-label">Expected Delivery Date *</label>
                            <input asp-for="ExpectedDate" type="date" class="form-control" />
                            <span asp-validation-for="ExpectedDate" class="text-danger"></span>
                        </div>
                    </div>

                    <hr class="my-4" />

                    <!-- Order Items -->
                    <h5 class="mb-3"><i class="fas fa-box"></i> Order Items</h5>

                    <div id="orderItemsContainer">
                        <!-- Dynamic order items will be added here -->
                    </div>

                    <button type="button" class="btn btn-secondary mb-4" onclick="addOrderItem()">
                        <i class="fas fa-plus"></i> Add Item
                    </button>

                    <!-- Total Amount Display -->
                    <div class="alert alert-info">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Total Items:</strong> <span id="totalItems">0</span>
                            </div>
                            <div class="col-md-6 text-end">
                                <strong>Total Amount:</strong> $<span id="totalAmount">0.00</span>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Back to List
                        </a>
                        <button type="submit" class="btn btn-primary btn-custom">
                            <i class="fas fa-save"></i> Create Purchase Order
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        let itemIndex = 0;
        const colorVariations = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(colorVariations ?? new List<ShoeShop.Services.DTOs.ShoeColorVariationDto>()));

        function addOrderItem() {
            const container = document.getElementById('orderItemsContainer');
            const itemHtml = `
                <div class="card mb-3 order-item" data-index="${itemIndex}">
                    <div class="card-body">
                        <div class="row align-items-end">
                            <div class="col-md-5">
                                <label class="form-label">Shoe Color Variation *</label>
                                <select name="OrderItems[${itemIndex}].ShoeColorVariationId" class="form-select" onchange="updateItemCost(${itemIndex})" required>
                                    <option value="">-- Select Shoe --</option>
                                    ${colorVariations.map(cv => `<option value="${cv.id}" data-cost="${cv.stockQuantity > 0 ? '0' : '0'}">${cv.shoeName} - ${cv.colorName} (Stock: ${cv.stockQuantity})</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity *</label>
                                <input type="number" name="OrderItems[${itemIndex}].QuantityOrdered" class="form-control quantity-input" min="1" value="1" onchange="calculateTotal()" required />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Unit Cost *</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" name="OrderItems[${itemIndex}].UnitCost" class="form-control unit-cost-input" min="0.01" step="0.01" value="0.00" onchange="calculateTotal()" required />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-danger w-100" onclick="removeOrderItem(${itemIndex})">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', itemHtml);
            itemIndex++;
            calculateTotal();
        }

        function removeOrderItem(index) {
            const item = document.querySelector(`[data-index="${index}"]`);
            if (item) {
                item.remove();
                calculateTotal();
            }
        }

        function calculateTotal() {
            let totalItems = 0;
            let totalAmount = 0;

            document.querySelectorAll('.order-item').forEach(item => {
                const quantity = parseFloat(item.querySelector('.quantity-input').value) || 0;
                const unitCost = parseFloat(item.querySelector('.unit-cost-input').value) || 0;
                totalItems++;
                totalAmount += quantity * unitCost;
            });

            document.getElementById('totalItems').textContent = totalItems;
            document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);
        }

        // Add first item on page load
        document.addEventListener('DOMContentLoaded', function() {
            addOrderItem();
        });
    </script>
}